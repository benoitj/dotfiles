#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* My emacs config

This is version *too many to count* of my emacs configuration.
After some basic setup, spacemacs, my own init.el, doom emacs, and now going back to basis using org tangle.

This configuration is inspired by [[https://github.com/daviwil/emacs-from-scratch][emacs-from-scratch]], doom emacs, and many people's emacs config.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-


#+end_src

* Startup Performance

** garbage collection tuning
   #+begin_src emacs-lisp

   ;; The default is 800 kilobytes.  Measured in bytes.
   (setq gc-cons-threshold (* 100 1000 1000))
   (add-hook 'emacs-startup-hook (lambda () (setq gc-cons-threshold (* 20 1000 1000))))
  
   #+end_src

** monitor performance  
   #+begin_src emacs-lisp

   (defun bj/display-startup-time ()
     (message "Emacs loaded in %s with %d garbage collections."
	      (format "%.2f seconds"
		      (float-time
			(time-subtract after-init-time before-init-time)))
	      gcs-done))

   (add-hook 'emacs-startup-hook #'bj/display-startup-time)

   #+end_src

* Package Management
** Use package

to configure stuff installed from guix

#+begin_src emacs-lisp

(setq use-package-always-defer t)
(setq use-package-always-ensure nil)
(setq use-package-verbose t)
 
(require 'use-package)

#+end_src

** Straight
   
for stuff not in guix

#+begin_src emacs-lisp

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Keep things clean
  #+begin_src emacs-lisp
(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering
  :demand t)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
 
  #+end_src
* Bindings / navigation
** General <space> configuration

   #+begin_src emacs-lisp

     (defun bj/open-dot-emacs ()
        ""
	(interactive)
	 (find-file (expand-file-name "~/src/dotfiles/templates/emacs.org")))

     (defun bj/open-dotfiles ()
         ""
	(interactive)
	 (find-file (expand-file-name "~/src/dotfiles/")))

     (use-package general
       :after evil
       :config
       (general-create-definer bj/leader-keys
	 :keymaps '(normal insert visual emacs)
	 :prefix "SPC"
	 :global-prefix "M-SPC")

       (bj/leader-keys
	 "b" '(:ignore t :which-key "buffers")
	 "bb" '(switch-to-buffer :which-key "buffers")
	 "bi" '(ibuffer :which-key "ibuffer")
	 "bd" '(kill-current-buffer :which-key "kill current")
	 "bD" '(kill-buffer :which-key "kill")
	 "f" '(:ignore t :which-key "files")
	 "ff" '(find-file :which-key "open")
	 "fs" '(save-buffer :which-key "save")
	 "fd" '(:ignore t :which-key "dotfiles")
	 "fdd" '(bj/open-dotfiles :which-key "dotfiles")
	 "fde" '(bj/open-dot-emacs :which-key "emacs")
	 "h" '(:keymap help-map :which-key "help")
	 "t"  '(:ignore t :which-key "toggles")
	 "w" '(:ignore t :which-key "windows")
	 "ww" '(other-window :which-key "switch")
	 "wd" '(delete-window :which-key "delete")
	 "wo" '(delete-other-windows :which-key "delete others")
	 "ws" '(split-window-below :which-key "split horiz")
	 "wv" '(split-window-right :which-key "split vert")))

   #+end_src

** Evil
 
   #+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; TODO Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))
  (use-package evil-visualstar
    :after evil
    :config
    (global-evil-visualstar-mode t))

   #+end_src

** window switching
   #+begin_src emacs-lisp
   (use-package ace-window
     :demand t
     :init
     (global-set-key [remap other-window] 'ace-window)
     (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
       )
   
   #+end_src

** scrolling
   #+begin_src emacs-lisp
   (use-package smooth-scrolling
     :defer 0
     :straight t
     :config
     (smooth-scrolling-mode 1))

   (setq scroll-conservatively 101)

   #+end_src
* UI Configuration
** run-now-or-make-frame-hook macro
   #+begin_src emacs-lisp
     (defmacro bj/run-now-or-on-make-frame-hook (&rest body)
       `(if (daemonp)
	    (add-hook 'server-after-make-frame-hook (lambda () ,@body))
	  (progn ,@body)))
   #+end_src
** Basic configuration
   #+begin_src emacs-lisp

     (setq inhibit-startup-message t)

     (scroll-bar-mode -1)        ; Disable visible scrollbar
     (tool-bar-mode -1)          ; Disable the toolbar
     (tooltip-mode -1)           ; Disable tooltips
     (set-fringe-mode 10)        ; Give some breathing room

     (menu-bar-mode -1)            ; Disable the menu bar

     ;; Set up the visible bell
     (setq visible-bell t)

     ;; Set frame transparency
     (setq bj/frame-transparency '(90 . 90))
     (set-frame-parameter (selected-frame) 'alpha bj/frame-transparency)
     (add-to-list 'default-frame-alist `(alpha . ,bj/frame-transparency))
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
     (add-to-list 'default-frame-alist '(fullscreen . maximized))

     (column-number-mode)
     (global-display-line-numbers-mode t)

     ;; Disable line numbers for some modes
     (dolist (mode '(org-mode-hook
		     term-mode-hook
		     shell-mode-hook
		     treemacs-mode-hook
		     eshell-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

     (defalias 'yes-or-no-p 'y-or-n-p)
     
   #+end_src
** saving sessions
   #+begin_src emacs-lisp
   (desktop-save-mode t)
   ;; (add-hook 'desktop-after-read-hook 'bj/reset-theme-hook)
   (save-place-mode t)
   #+end_src
** Font Configuration

This section setup fonts size and add an hydra to scale up/down the whole frame fonts

#+begin_src emacs-lisp
  (setq bj/default-font-size 120)
  (setq bj/fixed-font-name "Fira Code Retina")
  (setq bj/variable-font-name "Cantarell")

  ;; Make frame transparency overridable
  (defcustom bj/font-size bj/default-font-size "My default font size")

  (defun bj/set-frame-font-size (&optional font-size)
    "change frame font size to font-size.
      If no font-size specified, reset to default."
    (let ((font-size
	   (or font-size   
	       (car (get 'bj/font-size 'standard-value)))))
      (customize-set-variable 'bj/font-size font-size)
      (set-face-attribute 'default nil :font bj/fixed-font-name :height font-size)
    
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font bj/fixed-font-name :height font-size)
    
      (set-face-attribute 'variable-pitch nil :font bj/variable-font-name :height font-size :weight 'regular)))

  (defun bj/increase-frame-font ()
    "Increase font by 1"
    (interactive)
    (bj/set-frame-font-size (+ bj/font-size 10)))

  (defun bj/decrease-frame-font ()
    "Decrease font by 1"
    (interactive)
    (bj/set-frame-font-size (- bj/font-size 10)))

  (defun bj/reset-frame-font ()
    "Reset font size to default"
    (interactive)
    (bj/set-frame-font-size bj/default-font-size))

  (with-eval-after-load 'hydra
    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("+" bj/increase-frame-font "in")
      ("-" bj/decrease-frame-font "out")
      ("0" bj/reset-frame-font "reset")
      ("q" nil "finished" :exit t))
  
    (bj/leader-keys
      "ts" '(hydra-text-scale/body :which-key "scale text")))

  (bj/run-now-or-on-make-frame-hook (bj/reset-frame-font))
#+end_src

** TODO Theme

#+begin_src emacs-lisp

    (use-package modus-themes
    :demand t
    :init
    ;; Add all your customizations prior to loading the themes
    ;;(setq modus-themes-slanted-constructs t
    ;;     modus-themes-bold-constructs nil)

    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))
#+end_src
** modeline

   #+begin_src emacs-lisp
	(use-package all-the-icons
	  :demand t)
     (use-package doom-modeline
       :commands doom-modeline-mode
       :custom-face
       (mode-line ((t (:height 0.85))))
       (mode-line-inactive ((t (:height 0.85))))
       :custom
       (doom-modeline-height 15)
       (doom-modeline-bar-width 6)
       (doom-modeline-lsp t)
       (doom-modeline-modal-icon nil)
       (doom-modeline-minor-modes t)
       (doom-modeline-buffer-state-icon t)
       ;;(doom-modeline-buffer-file-name-style 'truncate-except-project)
       )
     (bj/run-now-or-on-make-frame-hook (doom-modeline-mode 1))
   #+end_src


** Which key

   #+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

   #+end_src

** ivy/counsel matcher
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :demand t
    :diminish 'ivy-mode
    :bind
    (("C-c C-r" . ivy-resume))
    ;; TODO: see if we want more bindings
   ;;   :bind (("C-s" . swiper)
   ;;          :map ivy-minibuffer-map
   ;;          ("TAB" . ivy-alt-done)
   ;;          ("C-l" . ivy-alt-done)
   ;;          ("C-j" . ivy-next-line)
   ;;          ("C-k" . ivy-previous-line)
   ;;          :map ivy-switch-buffer-map
   ;;          ("C-k" . ivy-previous-line)
   ;;          ("C-l" . ivy-done)
   ;;          ("C-d" . ivy-switch-buffer-kill)
   ;;          :map ivy-reverse-i-search-map
   ;;          ("C-k" . ivy-previous-line)
   ;;          ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :after ivy
    :diminish counsel-mode
    :general
      (bj/leader-keys
      "fr" '(counsel-recentf :which-key "recentf"))

    :config
    (counsel-mode 1))
   ;; TODO: do we need more bindings?
   ;; (use-package counsel
   ;;   :bind (("C-M-j" . 'counsel-switch-buffer)
   ;;          :map minibuffer-local-map
   ;;          ("C-r" . 'counsel-minibuffer-history))
   ;;   :custom
   ;;   (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
   ;;   :config
   ;;   (counsel-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

** help information
#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src
** hydras
   #+begin_src emacs-lisp
   (use-package hydra)
   #+end_src

** TODO m-x improved
** TODO completion
   
   #+begin_src emacs-lisp
  (use-package company
  :hook (after-init . global-company-mode)
  :custom
  (company-require-match #'company-explicit-action-p)
  (company-minimum-prefix-length 3)
  (company-idle-delay 0.2)
  (company-tooltip-align-annotation t)
  (company-auto-complete-chars nil)
  (company-frontends '(company-pseudo-tooltip-frontend
		       company-echo-metadata-frontend))
  :bind
  (([remap completion-at-point]  . company-manual-begin)
   ([remap completion-symbol]  . company-manual-begin)  
   
   :map company-active-map
   ("M-n" . nil)
   ("M-p" . nil)
   ("<tab>" . company-complete-selection)
   ("TAB" . company-complete-selection)
   ("SPC" . nil)
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous)
   :map company-active-map
   :filter (company-explicit-action-p)
   ("<return>" . company-complete-selection)
   ("RET"  . company-complete-selection))
  
  :bind*
  (("M-TAB" . company-manual-begin)))

;; provide partial matches in completion like with intellij
(use-package company-flx
  :after company
  :straight t
  :config
  (company-flx-mode +1))


;;;; quickhelp popup like with autocomplete
(use-package company-quickhelp
  :after company
  :config
  (setq company-quickhelp-delay 3)
  :commands (company-quickhelp-mode)
  :init
  (company-quickhelp-mode nil))

(use-package pos-tip
    :commands (pos-tip-show))

 ;; FIXME: somehow company-box does not have proper icons loaded
(use-package company-box
  :after (company all-the-icons)
  :hook (company-mode . company-box-mode))

   #+end_src
   
** parens highlighting
   #+begin_src emacs-lisp
   (use-package rainbow-delimiters
    :hook
    ((emacs-lisp-mode . rainbow-delimiters-mode)
     (clojure-mode . rainbow-delimiters-mode)))
   
   #+end_src
* file management
** dired
   #+begin_src emacs-lisp
   (global-set-key (kbd "<f5>") 'revert-buffer)

   (use-package all-the-icons-dired
     :after all-the-icons
     :hook (dired-mode . all-the-icons-dired-mode))

   (use-package neotree
     :bind
       (([f8] . 'neotree-toggle)))

       ;; History
     (setq savehist-file "~/.emacs.d/savehist"
           history-length t
	   history-delete-duplicates t
	   savehist-save-minibuffer-history 1
	   savehist-additional-variables
	        '(kill-ring
		search-ring
  		regexp-search-ring)
		recentf-max-saved-items 50)

     (savehist-mode 1)
     (recentf-mode 1)

     ;; enable open dired for current buffer
     (require 'dired-x)
     ;; allow dired to delete or copy dir
     (setq dired-recursive-copies (quote always)) ; “always” means no asking
     (setq dired-recursive-deletes (quote top)) ; “top” means ask once
     (put 'dired-find-alternate-file 'disabled nil)
     (setq dired-dwim-target t)

     (defun bj/dired-mode-setup ()
       "to be run as hook for `dired-mode'."
       (dired-hide-details-mode 1))
     (add-hook 'dired-mode-hook 'bj/dired-mode-setup)

   #+end_src
** searching
   #+begin_src emacs-lisp
    (use-package deadgrep
    :general 
    (bj/leader-keys
    "s" '(:ignore t :which-key "search")
    "sd" '(deadgrep :which-key "deadgrep")
    "sr" '(counsel-rg :which-key "counsel rg")))
;;         (:map deadgrep-mode-map
;;               ("q" . kill-this-buffer))))
 
   #+end_src
* editor  
** parens
   #+begin_src emacs-lisp
  (use-package smartparens
  :hook (prog-mode . smartparens-mode)
  :config
  (require 'smartparens-config))
 
   #+end_src
** editorconfig
   #+begin_src emacs-lisp
   (use-package editorconfig
     :hook (prog-mode . editorconfig-mode))
   #+end_src
** Editing functions

   #+begin_src emacs-lisp
   ;; fix up/down case word by going to the beginning of the word
   (defadvice upcase-word (before upcase-word-advice activate)
     (unless (looking-back "\\b" nil)
       (backward-word)))
   
   (defadvice downcase-word (before downcase-word-advice activate)
     (unless (looking-back "\\b" nil)
       (backward-word)))
   
   (defadvice capitalize-word (before capitalize-word-advice activate)
     (unless (looking-back "\\b" nil)
       (backward-word)))
   
   #+end_src

* TODO Org

** setup babel languages

#+begin_src emacs-lisp
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (ledger . t)))
#+end_src

** Structure templates

#+begin_src emacs-lisp

(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src


** Automatically "Tangle" on Save

Handy tip from [[https://leanpub.com/lit-config/read#leanpub-auto-configuring-emacs-and--org-mode-for-literate-programming][this book]] on literate programming.

#+begin_src emacs-lisp

  ;; Since we don't want to disable org-confirm-babel-evaluate all
  ;; of the time, do it around the after-save-hook
  (defun dw/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'dw/org-babel-tangle-dont-ask
                                                'run-at-end 'only-in-org-mode)))

#+end_src

* Apps
** TODO social
  for later 
   
   #+begin_src emacs-lisp
   
;; (use-package elfeed
;;   :config
;;   (global-set-key (kbd "C-x w") 'elfeed))
;; 
;; (use-package elfeed-org
;;   :after elfeed
;;   :config
;;   (setq rmh-elfeed-org-files '("~/Documents/elfeed.org"))
;;   (elfeed-org))
;; 
;; (use-package elfeed-goodies
;;   :after elfeed)
;; 
;; (use-package mastodon
;;   :config
;;   (setq mastodon-instance-url "https://linuxrocks.online"))
   #+end_src
** Command Log Mode

[[https://github.com/lewang/command-log-mode][command-log-mode]] is useful for displaying a panel showing each key binding you use in a panel on the right side of the frame.  Great for live streams and screencasts!

#+begin_src emacs-lisp

  (use-package command-log-mode
    :straight t
    :commands (command-log-mode global-command-log-mode)
    :general
    (bj/leader-keys
    "tc" '(:ignore t :which-key "command log")
    "tcc" '(clm/command-log-clear :which-key "clear")
    "tcb" '(clm/toggle-command-log-buffer :which-key "buffer")
    "tct" '(global-command-log-mode :which-key "toggle")))

#+end_src
** shell
   may have a look at better shell
   #+begin_src emacs-lisp
   (use-package eshell
     :general
     (bj/leader-keys
     "o" '(:ignore t :which-key "open")
     "os" '(:ignore t :which-key "shell")
     "ose" '(eshell :which-key "eshell")))

   (use-package vterm
     :general
     (bj/leader-keys
     "oss" '(vterm :which-key "vterm")))
   
   #+end_src
** TODO key management
   

(use-package keychain-environment
  :config
  (keychain-refresh-environment))
** TODO notmuch

   requires a .authinfo.gpg file with:
   machine smtp.mailbox.org login <user login> password "my password" port 465

   #+begin_src emacs-lisp
     (use-package notmuch
      :custom
      (send-mail-function 'smtpmail-send-it)
      (user-mail-address "benoit@benoitj.ca")
      (user-full-name "Benoit Joly")
      (smtpmail-smtp-server "smtp.mailbox.org")
      (smtpmail-stream-type 'ssl)
      (smtpmail-smtp-service 465)
      (notmuch-fcc-dirs "mailbox.org/Sent/")
      (message-directory "mailbox.org/Drafts/")
      (notmuch-saved-searches
        '((:name "recent inbox" :query "tag:inbox AND date:2w..now" :key "i" :sort-order newest-first)
          (:name "full inbox" :query "tag:inbox" :key "I")
          (:name "unread" :query "tag:unread" :key "u")
          (:name "flagged" :query "tag:flagged" :key "f")
          (:name "sent" :query "tag:sent" :key "t")
          (:name "drafts" :query "tag:draft" :key "d")
          (:name "all mail" :query "*" :key "a")))
      :general
      (bj/leader-keys
       "om" '(notmuch-hello :which-key "notmuch")))
   #+end_src
* Dev tools
** TODO Projectile
   #+begin_src emacs-lisp
   (use-package projectile
  :general
  (bj/leader-keys
    "p" '(:ignore t :which-key "projectile")
    "pp" '(projectile-switch-project :which-key "switch")
    "pf" '(projectile-find-file :which-key "file")
    "pr" '(projectile-ripgrep :which-key "ripgrep"))
  :config
  (projectile-mode))
    
  (use-package counsel-projectile
  :general
  (bj/leader-keys
    "pg" '(counsel-projectile-git-grep :which-key "git grep"))
  :config
  (counsel-projectile-mode +1)
  (setq projectile-completion-system 'ivy))
 
   #+end_src
** Git

   #+begin_src emacs-lisp
     (use-package magit
       :commands magit-status
       :general
       (bj/leader-keys
	 "g" '(:ignore t :which-key "git")
	 "gg" '(magit-status :which-key "status")
	 "gf" '(magit-file-dispatch :which-key "file ops")))
   #+end_src
